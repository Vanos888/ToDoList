// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/service/task.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskApi_CreateTask_FullMethodName      = "/TaskApi/CreateTask"
	TaskApi_SetTaskStatus_FullMethodName   = "/TaskApi/SetTaskStatus"
	TaskApi_GetTaskByFilter_FullMethodName = "/TaskApi/GetTaskByFilter"
)

// TaskApiClient is the client API for TaskApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskApiClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	SetTaskStatus(ctx context.Context, in *SetTaskStatusRequest, opts ...grpc.CallOption) (*SetTaskStatusResponse, error)
	GetTaskByFilter(ctx context.Context, in *GetTaskByFilterRequest, opts ...grpc.CallOption) (*GetTaskByFilterResponse, error)
}

type taskApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskApiClient(cc grpc.ClientConnInterface) TaskApiClient {
	return &taskApiClient{cc}
}

func (c *taskApiClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, TaskApi_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskApiClient) SetTaskStatus(ctx context.Context, in *SetTaskStatusRequest, opts ...grpc.CallOption) (*SetTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTaskStatusResponse)
	err := c.cc.Invoke(ctx, TaskApi_SetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskApiClient) GetTaskByFilter(ctx context.Context, in *GetTaskByFilterRequest, opts ...grpc.CallOption) (*GetTaskByFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskByFilterResponse)
	err := c.cc.Invoke(ctx, TaskApi_GetTaskByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskApiServer is the server API for TaskApi service.
// All implementations must embed UnimplementedTaskApiServer
// for forward compatibility.
type TaskApiServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	SetTaskStatus(context.Context, *SetTaskStatusRequest) (*SetTaskStatusResponse, error)
	GetTaskByFilter(context.Context, *GetTaskByFilterRequest) (*GetTaskByFilterResponse, error)
	mustEmbedUnimplementedTaskApiServer()
}

// UnimplementedTaskApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskApiServer struct{}

func (UnimplementedTaskApiServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskApiServer) SetTaskStatus(context.Context, *SetTaskStatusRequest) (*SetTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskStatus not implemented")
}
func (UnimplementedTaskApiServer) GetTaskByFilter(context.Context, *GetTaskByFilterRequest) (*GetTaskByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByFilter not implemented")
}
func (UnimplementedTaskApiServer) mustEmbedUnimplementedTaskApiServer() {}
func (UnimplementedTaskApiServer) testEmbeddedByValue()                 {}

// UnsafeTaskApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskApiServer will
// result in compilation errors.
type UnsafeTaskApiServer interface {
	mustEmbedUnimplementedTaskApiServer()
}

func RegisterTaskApiServer(s grpc.ServiceRegistrar, srv TaskApiServer) {
	// If the following call pancis, it indicates UnimplementedTaskApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskApi_ServiceDesc, srv)
}

func _TaskApi_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskApiServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskApi_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_SetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskApiServer).SetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskApi_SetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).SetTaskStatus(ctx, req.(*SetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_GetTaskByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskApiServer).GetTaskByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskApi_GetTaskByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).GetTaskByFilter(ctx, req.(*GetTaskByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskApi_ServiceDesc is the grpc.ServiceDesc for TaskApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskApi",
	HandlerType: (*TaskApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskApi_CreateTask_Handler,
		},
		{
			MethodName: "SetTaskStatus",
			Handler:    _TaskApi_SetTaskStatus_Handler,
		},
		{
			MethodName: "GetTaskByFilter",
			Handler:    _TaskApi_GetTaskByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service/task.proto",
}
